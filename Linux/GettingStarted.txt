==================================================
Talking live to SpikeGLX from a remote application
==================================================


SpikeGLX Setup
==============

1. Launch SpikeGLX on the data acquisition machine. This machine and the remote client machine must be connected to the same network.

2. Open SpikeGLX dialog 'Options/Command Server Settings...'

3. Click 'Enable Remote Command Server' and then click 'My Address.'

4. Write down the IP address; you'll need to type that into your remote script.

Note: If the script times out (about 10 seconds) when trying to connect to SpikeGLX, it may be Windows Firewall blocking access. You can add SpikeGLX to the allowed list of applications by going to the top level of the Windows Control Panel and choosing 'Windows Security/Firewall and network protection/Allow an app through Firewall.' In the Allowed Apps dialog you can then edit the settings for SpikeGLX or add it to the list if necessary.

Note: If running in WSL2 and you are unable to connect to SpikeGLX on the same machine: Open 'Windows Firewall Settings' / 'Advanced Settings' / 'Properties' / 'Public Profile' tab / 'Customize' (Protected network connections) / Uncheck 'vEthernet (WSL).'


Remote Setup General
====================

Run 'make-install.sh in 'SpikeGLX-CPP-SDK/Linux/API.'
Additional components, to assist binding to C and to demonstrate how to call the API, are located in the language-specific folders.

1. Create the desired kind of project. We provide steps to do that in the language-specific folders.

2. Make sure libSglxApi.so is on your link/load path, or copy it to your project folder.

Note: For Python (no exe), you can copy libSglxApi.so to the sglx_pkg folder.

3. Copy the project components from API to your project directories according to that language's needs.
A C++ project typcally needs:
- SglxApi.h          // describes the API functions
- SglxCppClient.cpp  // code you must compile as part of your project
- SglxCppClient.h

4. Try some of the examples in 'DemoRemoteAPI.xxx.'


Linux Tips
==========

- Some components are Bourne Shell scripts (*.sh). You might need to make them executable using 'chmod +x <script>.sh.'

- You are free to edit the make scripts to put or get API components and the (so) library wherever you want...

- For compile and link steps using gcc or g++, set the path to find libraries using -L<path>.

- For runtime loading, append to the environment variable LD_LIBRARY_PATH like this:

LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<my_path>
export LD_LIBRARY_PATH

You can add these lines to your .bash_profile. After doing so, make the new definitions active, either by logging out/in, or typing 'source ~/.bash_profile.'

- You can alternatively place a copy of libSglxApi.so in the same folder as your executable, or into a Python package.


