==================================================
Talking live to SpikeGLX from a remote application
==================================================


SpikeGLX Setup
==============

1. Launch SpikeGLX on the data acquisition machine. This machine and the remote client machine must be connected to the same network.

2. Open SpikeGLX dialog 'Options/Command Server Settings...'.

3. Click 'Enable Remote Command Server' and then click 'My Address'.

4. Write down the IP address; you'll need to type that into your remote script.

Note: You can run SpikeGLX and your client application on the same machine, and in this configuration you can either use the computer's actual network address (per step 3), or the 'loopback' address if you don't have a network connection on this computer. Every computer has an internal 'loopback' address set to '127.0.0.1'.

Note: If the script times out (about 10 seconds) when trying to connect to SpikeGLX, it may be Windows Firewall blocking access. You can add SpikeGLX to the allowed list of applications by going to the top level of the Windows Control Panel and choosing 'Windows Security/Firewall and network protection/Allow an app through Firewall.' In the Allowed Apps dialog you can then edit the settings for SpikeGLX or add it to the list if necessary.


Remote Setup General
====================

Common API components are located within Release subfolder 'SpikeGLX-CPP-SDK/API'.
Additional components, to assist binding to C and to demonstrate how to call the API, are located in the language-specific folders.

1. Create the desired kind of project. We provide steps to do that in the language-specific folders.

2. Copy the DLLs from API to your target application (runtime) directory:
- libgcc_s_seh-1.dll
- libstdc++-6.dll
- libwinpthread-1.dll
- SglxApi.dll

Note: For Python (no exe), copy the DLLs to the sglx_pkg folder.

3. Copy the project components from API to your project directories according to that language's needs.
A C++ project typcally needs:
- libSglxApi.a       // add to your linked library list
- SglxApi.h          // describes the API functions
- SglxCppClient.cpp  // code you must compile as part of your project
- SglxCppClient.h

4. Compile your project for 64-bit Windows.

5. Try some of the examples in 'DemoRemoteAPI.xxx'.


