========
SYNOPSIS
========

The SpikeGLX API (SglxApi.dll) accesses the SpikeGLX program via TCP/IP. On top of that, our message exchange protocol implements acknowledgement, validation and error reporting. SpikeGLX.exe and the API client can run on the same machine (via loopback socket address 127.0.0.1) or across a network.

The API provides extensive control over a running SpikeGLX process: starting and stopping a run, setting parameters, fetching live data, calling the Par2 and SHA1 tools, and so on. Everything you need to integate SpikeGLX into your workflow.

The core technology is implemented in C++. All other languages are layered on top of the C++ core. C++ clients will have the lowest possible latency because native data types can be used throughout, which bypasses type conversion and extra data copying.

A session begins when an API client program creates a connection handle, which is then passed to all API functions. All subsequent network communication with the SpikeGLX server process is handled automatically within the DLL.

A connection handle is weakly stateful: merely keeping a handle to a network socket. A network connection cleans up after itself on the server side after 10 seconds of inactivity. By the way, if your script has paused longer than 10 seconds, and you reuse a handle that has timed out, the API will automatically reestablish a connection and the script will likely continue without problems. Note that reestablishing a connection (if needed) may take several tens of milliseconds. You can change the timeout value in the SpikeGLX Command Server Settings window.

The API should support multithreaded clients, as long as each thread or subprocess is using its own connection handle.

============
C++ EXAMPLES
============

void *hSglx = sglx_createHandle_std();  // create a connection handle
sglx_connect( hSglx );                  // connect to SpikeGLX running on local machine

cppClient_sglx_get_keyvals  g_kv;       // container for getting params
sglx_getParams( g_kv, hSglx );          // optionally retrieve run params as (key, value) pairs

cppClient_sglx_set_keyvals  s_kv;       // container for setting params
s_kv.mstrstr["niMNChans1"] = "0:5";
s_kv.mstrstr["niDualDevMode"] = "false";
sglx_setParams( hSglx, s_kv );          // make changes

sglx_startRun( hSglx );                 // start data acquisition run using last-set params
sglx_stopRun( hSglx );                  // stop run

sglx_close( hSglx );                    // release network resources
sglx_destroyHandle( hSglx );            // release memory resources

========
(js, ip)
========

The two integer values (js, ip) select a data stream.
js: stream type: {0=nidq, 1=obx, 2=imec-probe}.
ip: substream:   {0=nidq (if js=0), 0+=which OneBox or imec probe}.
Examples (js, ip):
(0, 0) = nidq.	// for nidq, ip is arbitrary but zero by convention
(1, 4) = obx4.
(2, 7) = imec7.
Note: ip has range [0..np-1], where, np is queried using GetStreamNP().

=======================
GetParams and SetParams
=======================

Manual Pre-validation
=====================

You'll find that several of the API functions to get or set run parameters complain if you haven't validated any parameters yet. Manual validation is something you need to do only once per launch of the SpikeGLX application, not once per run. To validate parameters, visit the Configure dialog in SpikeGLX and make choices for your experiment, then click either 'Run' or 'Verify|Save'. Either of these buttons apply a battery of self-consistency checks to your choices. The most recent set of Configuration settings that have passed all the sanity checks are saved in:

- 'SpikeGLX/_Configs/daq.ini'
- 'SpikeGLX/_Calibration/imec_probe_settings.ini'
- 'SpikeGLX/_Calibration/imec_onebox_settings.ini'.

The above ini files are used to initialize the Configure dialog each time you open it. Open the ini files in a text editor. You'll see several subgroups of settings. This is the best way to see the exact spelling, case, and value type of the items you can read and write via the API. Examples of accessing the subgroups:

- Group [DAQSettings]:                GetParams()
- Group [DAQ_Imec_All]:               GetParamsImecCommon()
- Group [SerialNumberToProbe]/SNjjj:  GetParamsImecProbe()
- Group [SerialNumberToOneBox]/SNjjj: GetParamsOneBox()

Generally, follow this workflow:

(1) Launch SpikeGLX and make sure its Command Server is listening (you'll see a message to that effect in the Console/Log window).

(2) Open the Configure dialog to elect which hardware streams you want to run.

(3) Click 'Detect' and then 'Verify|Save'.

Now you are ready to run from a remote application.

(4) Typically you will need to adjust just a few settings from within your script.


